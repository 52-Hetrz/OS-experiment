#include <stdio.h>#include <stdlib.h>#include <sys/types.h>#include <unistd.h>#include <sys/stat.h>#include <fcntl.h>#include <stdint.h>void mem_addr(unsigned long vaddr, unsigned long *paddr){	int pageSize = getpagesize();	unsigned long v_pageIndex = vaddr / pageSize;	unsigned long v_offset = v_pageIndex * sizeof(uint64_t);	unsigned long page_offset = vaddr % pageSize;	uint64_t item = 0;	printf("virtual address:     %x     \nvirtual pageIndex:   %x    \npage offset:         %x\n", vaddr, v_pageIndex, page_offset);	int fd = open("/proc/self/pagemap", O_RDONLY);	if (fd == -1)	{		printf("open /proc/self/pagemap error\n");		return;	}	if (lseek(fd, v_offset, SEEK_SET) == -1)	{		printf("sleek error\n");		return;	}	if (read(fd, &item, sizeof(uint64_t)) != sizeof(uint64_t))	{		printf("read item error\n");		return;	}	if ((((uint64_t)1 << 63) & item) == 0)	{		printf("page present is 0\n");		return;	}	uint64_t phy_pageIndex = (((uint64_t)1 << 55) - 1) & item;	printf("physical pageIndex:  %x\n", phy_pageIndex);	*paddr = (phy_pageIndex * pageSize) + page_offset;}int main(){	int a = 100;	unsigned long phy = 0;	mem_addr((unsigned long)&a, &phy);	printf("physical addr        %x\n", phy);	return 0;}